<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code with Kira</title>
  <link href="https://codewithkira.com/atom.xml" rel="self"/>
  <link href="https://codewithkira.com"/>
  <updated>2024-04-04T19:11:30+00:00</updated>
  <id>https://codewithkira.com</id>
  <author>
    <name>Kira McLean</name>
  </author>
  <entry>
    <id>https://codewithkira.com/2024-04-04-state-of-clojure-ml.html</id>
    <link href="https://codewithkira.com/2024-04-04-state-of-clojure-ml.html"/>
    <title>The Current State of ML in Clojure</title>
    <updated>2024-04-04T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>I had a really enlightening talk with <a href='https://www.linkedin.com/in/daniel-slutsky-42122b4/'>Daniel Slutsky</a> this week (who is an exceptional data scientist, software engineer, and community oragnizer I highly recommended meeting if you haven't already) about the current state of the machine learning landscape in Clojure. This post is my attempt to distill it into a summary for the community's benefit, so more people can understand where things are at and what the active developers in this space are working on.</p><p>It's no secret I love Clojure and especially working with data in Clojure, but it's fair to say that the Clojure for data science ecosystem is not anywhere near as easy to use or understand as reasonable potential users might expect. This is the main problem I'm focusing on this year, and there is significant effort being put into refining our tools to make them more accessible to a wider audience.</p><p>There are already people doing "real" machine learning work in Clojure, though, and below is an overview of what the current state of our libraries and tools are in that area, as of April 2024.</p><h2 id="java&#95;ml&#95;libraries">Java ML Libraries</h2><p>There are two (sort of three) popular Java libraries that implement many of the main algorithms and tools used in machine learning (e.g. classification, regression, clustering, model development, etc.): <a href='https://tribuo.org/'>Tribuo</a> and <a href='https://haifengl.github.io/'>Smile</a>. We count Smile as two libraries because Smile 2.x is LGPL-licensed, and Smile 3.x is GPL-licensed, which poses some potential conflicts for some end users. The community consensus is converging around moving away from Smile due to the GPL-relicensing issue, focusing instead on Tribuo and hand-rolled solutions.</p><h2 id="clojure&#95;wrappers">Clojure wrappers</h2><p>There are two main "families" of libraries that wrap these Java ML libraries in Clojure.</p><p><a href='https://github.com/generateme/fastmath'>Fastmath</a> includes statistical as well as machine learning tools for Clojure. Fastmath 2.4.0+ depends on Smile 2, and the forthcoming fastmath 3.x will have no Smile dependency at all. The clustering functionality in fastmath 2.x that depended on smile has been moved to the <a href='https://github.com/generateme/fastmath-clustering'>fastmath-clustering</a> library, which will have a Smile 2.x dependency going forward. There is a strong preference in the community to avoid introducing GPL-licensed libraries into the ecosystem.</p><p><a href='https://github.com/scicloj/scicloj.ml.smile'>scicloj.ml.smile</a>, as you might expect, wraps Smile. It wraps much more of Smile than fastmath did (does). <a href='https://github.com/scicloj/scicloj.ml.tribuo'>scicloj.ml.tribuo</a> wraps the Tribuo library and is likely to become the main source of ML algorithms for the ecosystem.</p><p><a href='https://github.com/techascent/tech.ml.dataset'>tech.ml.dataset</a> (the core dataframe/dataset library underlying tablecloth) also <a href='https://github.com/techascent/tech.ml.dataset/blob/master/src/tech/v3/libs/tribuo.clj'>incorporates some of the functionality of tribuo</a>, with the API centered around individual datasets. Which leads me to the next group of libraries. </p><p>It's worth also mentioning <a href='https://github.com/techascent/tech.ml'>tech.ml</a>, which implements some machine learning tools, but has been deprecated in favour of the various libraries discussed above.</p><h2 id="clojure&#95;ml&#95;pipelines">Clojure ML Pipelines</h2><p><a href='https://github.com/scicloj/metamorph'>Metamorph</a> is a library that implements a function composition mechanism for composing ML pipelines. It arises from the common ML practice of repeatedly running the same set of functions with varied parameters. You might, for example, try many different test/train splits to see how that affects your results, or fit the same data using many different algorithms, or try training your model using different sets of features. This leads to an explosion of pipeline permuatations, so it's useful to have machinery to encapsulate the variable components of your ML pipeline into a single function. This is where metamorph.ml comes in. </p><p><a href='https://github.com/scicloj/metamorph.ml'>Metamorph.ml</a> is based on this concept of meta-functions and pipelines. It is currently the central library for orchestrating ML pipelines in Clojure. It's API is still evolving, and there are currently <a href='https://clojurians.zulipchat.com/#narrow/stream/321125-noj-dev/topic/ols.20interaction.20tutorial/near/422408507'>many ways (10+)</a> to acheive the same outcomes, with no clear community consensus yet on a preferred approach.</p><h2 id="collections/frameworks">Collections/Frameworks</h2><p>The community is well aware that it is difficult to know where to get started and several efforts have been made in an attempt to make the path more clear for people who want tools that Just Work. <a href='https://github.com/scicloj/scicloj.ml'>scicloj.ml</a> is one such project. It's a collection of libraries (mostly the ones mentioned above) with some lightweight wrappers and efforts in creating documentation.</p><p>The community is heading toward deprecating this library, though, in favour of <a href='https://github.com/scicloj/noj'>noj</a>, which we are hoping to stabilize in the near future. The goal is to have a single entry-point into the Clojure data science stack with all the tools one would need to do work with data consolidated in one place, with seamless interoperability akin to R's tidyverse of libraries.<h2 id="more&#95;updates">More updates</h2></p><p>These discussions all happen in the open, on the <a href='https://clojurians.zulipchat.com'>Clojurian's Zulip instance</a>, which has become the main gathering place of the Clojure-for-data-science community. The <code>#data-science</code> and <code>#noj-dev</code> streams are the most active on these topics at the time of this writing. You can follow along with developments in the trenches over there, or follow the key libraries on github for updates (<a href='https://github.com/scicloj/scicloj.ml.smile'>scicloj.smile.ml</a>, <a href='https://github.com/scicloj/scicloj.ml.tribuo'>scicloj.ml.tribuo</a>, <a href='https://github.com/scicloj/metamorph.ml'>metamorph.ml</a>, <a href='https://github.com/scicloj/noj'>noj</a>). I will also post periodic updates here and all the other corners of the internet where I lurk.</p>]]></content>
  </entry>
  <entry>
    <id>https://codewithkira.com/2024-02-29-clojurists-together-update-jan-feb-2024.html</id>
    <link href="https://codewithkira.com/2024-02-29-clojurists-together-update-jan-feb-2024.html"/>
    <title>OSS Updates January and February 2024</title>
    <updated>2024-02-29T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>I was lucky enough to get funding this year from Clojurists together to work on some open source projects for the Clojure community. It's been a really fun couple of months getting more involved in the ecosystem and having the time to work on some projects that I've long thought would be valuable for the community. This post is a summary of the things I've been working on over the past two months.</p><h2 id="sponsors">Sponsors</h2><p>First of all, I want to thank the sponsors that make this work possible. We're living through the worst tech job market since I started working as a software engineer, and I'm lucky to have a little bit of time and runway to work on things I find interesting thanks to the generous sponsors who find my work worthwhile.</p><p>Right now my work is primarily funded by <a href='https://www.clojuriststogether.org'>Clojurists Together</a> and <a href='https://www.cognitect.com'>Cognitect/Nubank</a>. Thank you to these major sponsors, and to everyone who contributes to my continued work in the Clojure open source ecosystem.</p><p>If you find the work I do valuable, please share it with others or consider supporting it financially. I would love to be able to turn working on this kind of stuff into a sustainable career in the long term.</p><h2 id="clojure&#95;tidy&#95;tuesdays">Clojure Tidy Tuesdays</h2><p>The main thing I spent my time working on over the past couple of months was a collection of tutorials and guides for working with data in Clojure. The R for Data Science online learning community publishes toy datasets every week for "Tidy Tuesdays" with a question to answer or example article to reproduce. I've been going through them in Clojure, and it's proven a great tool for uncovering areas for future development in the Clojure data science ecosystem.</p><h2 id="other&#95;work">Other Work</h2><p>The explorations with the Tidy Tuesday data have been revealing areas where I think we could benefit from more ergonomic ways to work with tablecloth datasets. I started two little projects each with a couple of little wrappers around existing functions to make them easier to use with tablecloth datasets. So far I'm calling them <code>tcstats</code> (for statistical operations on datasets) and <code>tcutils</code> (with miscellaneous dataset manipulation tools that aren't built-in to tablecloth directly).</p><p>I am also still working on the Clojure Data Cookbook. I nudged it forward ever so slightly these last couple of months, and I plan to finish it despite the remaining holes in Clojure's data science stack. I would love to also fill these in eventually, but the Cookbook will be a living document that can easily evolve and be updated as new tools and libraries are developed.</p><p>Lastly, one of the main missing pieces I'm discovering we really need to work on in Clojure's data science ecosystem is a robust yet flexible graphics library. There are a few great solutions that already exist, but they take different approaches to graphing that can make them a bit clumsy to work with when it comes time to build more complex visualisations. My dream is to implement a proper <a href='https://ggplot2-book.org'>grammar of graphics</a> in Clojure, giving the Clojure data ecosystem a "professional quality" graphics library, so to speak. Anyway.. there is still tons of work to do here so I'm grateful for the ongoing funding that will allow me to continue to focus a large amount of time on it for the foreseeable future.</p>]]></content>
  </entry>
  <entry>
    <id>https://codewithkira.com/2024-01-12-clojure-tidy-tuesdays.html</id>
    <link href="https://codewithkira.com/2024-01-12-clojure-tidy-tuesdays.html"/>
    <title>Clojure Tidy Tuesdays</title>
    <updated>2024-01-12T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>One of the things I'm going to spend my new-found independent software development time on this year is doing TidyTuesdays in Clojure. It's no surprise that I'm a big fan of Clojure, or that I think there is a lack of good "how to do data science with Clojure" content out there. One of the big things I want to accomplish this year is filling this gap.</p><p>To that end, I'll be publishing "translations" of the data-fetching scripts into Clojure and implementations of example data analysis from <a href='https://github.com/rfordatascience/tidytuesday/tree/master'>TidyTuesdays</a>, an initiative of the R for data science online learning community.</p><p>The idea is that they post a toy dataset each week along with an example article that uses the same or similar data, and then the community posts their solutions and what they did with it around the internet.</p><p>I'll be sharing mine in <a href='https://github.com/kiramclean/clojure-tidy-tuesdays/tree/main'>this Clojure Tidy Tuesdays github repo</a> and posting on <a href='https://indieweb.social/@kira'>Mastodon</a> and <a href='https://www.linkedin.com/in/kiramclean/'>LinkedIn</a>. Follow along here or there for more!</p>]]></content>
  </entry>
  <entry>
    <id>https://codewithkira.com/2024-01-02-a-year-of-open-source.html</id>
    <link href="https://codewithkira.com/2024-01-02-a-year-of-open-source.html"/>
    <title>A Year of Open Source</title>
    <updated>2024-01-02T23:59:59+00:00</updated>
    <content type="html"><![CDATA[<p>It's a new year! I always feel so ambitious at the start of a new year. This one especially, though. I got a very exciting early Christmas present this year.</p><p><img src="/assets/2024-01-02-clj-together-message.jpg" alt="Daniel's very exciting message!" /></p><p>Of course I happily accepted this super exciting opportunity. Ever since I started dabbling software nearly 10 years ago now my dream was to eventually someday, somehow, make a living on my own terms. I quickly learned that I am not cut out for tech startups, but there are lots of other ways to make a living in software. I'm not sure I'm cut out for those either, but the way I see it this year is my chance to finally find out.</p><p>I'm mostly optimistic. I definitely have tons of ideas for things to work on, and I have a ton of motivation to make this work. How amazing would it be to actually be able to make a sustainable living working on things that I find interesting and that benefit my community? I'm planning on giving myself this year to make it work, and if I have to I'll find a real job again next year. I hope I don't have to.</p><p>I'll be working on open source projects using Clojure, mostly focusing on data-related stuff. I have a long running project writing a book about doing data stuff in Clojure that I plan to spend a lot more time on this year. It turns out writing a book is <i>so much</i> work, way more than I thought at first, but I'm never giving up and I will finish it no matter how long it takes. I also have a million small ideas for polishing things around the clojure data ecosystem that I think would help make it feel more ergonomic for "data people". I'd love to build on some of the tools out there for combining data libraries, tidyverse style. There's also a lack of guides and courses for learning how to use the emerging "default" stack for data science in Clojure. I think I can help in all these areas.</p><p>I think it'll take some discipline and re-wiring of my brain to be successful, but I think I can do it. I'm so used to being given projects to do for other people and squeezing in my side projects around my working hours. What will it look like when my side projects become my main focus during full-time working hours?</p><p>I'll need to learn how to prioritize things without much external influence or direction. Case in point &ndash; I spent over an hour faffing with the styles for this blog. On one hand, I care more than I should about aesthetics and at the end of the day do believe that function should take priority. On the other hand, it's done now and I have a blog I like looking at!</p><p>Anyway I made this website to separate my work in programming from my other pursuits, like yoga and violin. My plan is to post periodic updates and other tech-related posts here. If there's anything you would like to see contributed to the Clojure ecosystem, let me know! I'm always open to suggestions and ideas and especially early on this year I would love to hear from the people who voted for me to receive this funding.</p><p>Wish me luck!</p>]]></content>
  </entry>
</feed>
